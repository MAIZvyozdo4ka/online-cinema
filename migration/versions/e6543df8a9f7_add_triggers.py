"""add triggers

Revision ID: e6543df8a9f7
Revises: dc268ed34399
Create Date: 2024-11-18 01:45:25.927052

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'e6543df8a9f7'
down_revision: Union[str, None] = 'dc268ed34399'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_update_movie_rating_after_insert_rate = PGFunction(
        schema="public",
        signature="update_movie_rating_after_insert_rate()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        UPDATE movies\n        SET movie_rating_count = movie_rating_count + 1,\n            movie_rating_sum = movie_rating_sum + NEW.rating\n        WHERE\n            id = NEW.movie_id;\n    return NEW;\n    END;\n$$ language 'plpgsql'"
    )
    op.create_entity(public_update_movie_rating_after_insert_rate)

    public_update_movie_rating_after_update_rate = PGFunction(
        schema="public",
        signature="update_movie_rating_after_update_rate()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        IF (NEW.rating <> OLD.rating) THEN\n            UPDATE movies\n            SET movie_rating_sum = movie_rating_sum + NEW.rating - OLD.rating\n            WHERE\n                id = NEW.movie_id;\n        END IF;\n    return NEW;\n    END;\n$$ language 'plpgsql'"
    )
    op.create_entity(public_update_movie_rating_after_update_rate)

    public_update_movie_rating_after_delete_rate = PGFunction(
        schema="public",
        signature="update_movie_rating_after_delete_rate()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        UPDATE movies\n        SET movie_rating_count = movie_rating_count - 1,\n            movie_rating_sum = movie_rating_sum - OLD.rating\n        WHERE\n            id = OLD.movie_id;\n        \n    return OLD;\n    END;\n$$ language 'plpgsql'"
    )
    op.create_entity(public_update_movie_rating_after_delete_rate)

    public_user_movie_rating_insert_rating_trigger = PGTrigger(
        schema="public",
        signature="insert_rating_trigger",
        on_entity="public.user_movie_rating",
        is_constraint=False,
        definition='BEFORE INSERT ON public.user_movie_rating\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_rating_after_insert_rate()'
    )
    op.create_entity(public_user_movie_rating_insert_rating_trigger)

    public_user_movie_rating_update_rating_trigger = PGTrigger(
        schema="public",
        signature="update_rating_trigger",
        on_entity="public.user_movie_rating",
        is_constraint=False,
        definition='BEFORE UPDATE ON public.user_movie_rating\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_rating_after_update_rate()'
    )
    op.create_entity(public_user_movie_rating_update_rating_trigger)

    public_user_movie_rating_delete_rating_trigger = PGTrigger(
        schema="public",
        signature="delete_rating_trigger",
        on_entity="public.user_movie_rating",
        is_constraint=False,
        definition='BEFORE DELETE ON public.user_movie_rating\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_rating_after_delete_rate()'
    )
    op.create_entity(public_user_movie_rating_delete_rating_trigger)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    public_user_movie_rating_delete_rating_trigger = PGTrigger(
        schema="public",
        signature="delete_rating_trigger",
        on_entity="public.user_movie_rating",
        is_constraint=False,
        definition='BEFORE DELETE ON public.user_movie_rating\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_rating_after_delete_rate()'
    )
    op.drop_entity(public_user_movie_rating_delete_rating_trigger)

    public_user_movie_rating_update_rating_trigger = PGTrigger(
        schema="public",
        signature="update_rating_trigger",
        on_entity="public.user_movie_rating",
        is_constraint=False,
        definition='BEFORE UPDATE ON public.user_movie_rating\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_rating_after_update_rate()'
    )
    op.drop_entity(public_user_movie_rating_update_rating_trigger)

    public_user_movie_rating_insert_rating_trigger = PGTrigger(
        schema="public",
        signature="insert_rating_trigger",
        on_entity="public.user_movie_rating",
        is_constraint=False,
        definition='BEFORE INSERT ON public.user_movie_rating\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_rating_after_insert_rate()'
    )
    op.drop_entity(public_user_movie_rating_insert_rating_trigger)

    public_update_movie_rating_after_delete_rate = PGFunction(
        schema="public",
        signature="update_movie_rating_after_delete_rate()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        UPDATE movies\n        SET movie_rating_count = movie_rating_count - 1,\n            movie_rating_sum = movie_rating_sum - OLD.rating\n        WHERE\n            id = OLD.movie_id;\n        \n    return OLD;\n    END;\n$$ language 'plpgsql'"
    )
    op.drop_entity(public_update_movie_rating_after_delete_rate)

    public_update_movie_rating_after_update_rate = PGFunction(
        schema="public",
        signature="update_movie_rating_after_update_rate()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        IF (NEW.rating <> OLD.rating) THEN\n            UPDATE movies\n            SET movie_rating_sum = movie_rating_sum + NEW.rating - OLD.rating\n            WHERE\n                id = NEW.movie_id;\n        END IF;\n    return NEW;\n    END;\n$$ language 'plpgsql'"
    )
    op.drop_entity(public_update_movie_rating_after_update_rate)

    public_update_movie_rating_after_insert_rate = PGFunction(
        schema="public",
        signature="update_movie_rating_after_insert_rate()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        UPDATE movies\n        SET movie_rating_count = movie_rating_count + 1,\n            movie_rating_sum = movie_rating_sum + NEW.rating\n        WHERE\n            id = NEW.movie_id;\n    return NEW;\n    END;\n$$ language 'plpgsql'"
    )
    op.drop_entity(public_update_movie_rating_after_insert_rate)

    # ### end Alembic commands ###
