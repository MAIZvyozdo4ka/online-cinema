"""review count triggers

Revision ID: c03be4fbe95f
Revises: a6d8c0538b71
Create Date: 2024-11-21 05:36:31.583514

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'c03be4fbe95f'
down_revision: Union[str, None] = 'a6d8c0538b71'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('movies', sa.Column('movie_reviews_count', sa.Integer(), server_default='0', nullable=False))
    public_update_movie_review_count_after_insert_review = PGFunction(
        schema="public",
        signature="update_movie_review_count_after_insert_review()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        UPDATE movies\n        SET movie_reviews_count = movie_reviews_count + 1\n        WHERE\n            id = NEW.movie_id;\n    return NEW;\n    END;\n$$ language 'plpgsql'"
    )
    op.create_entity(public_update_movie_review_count_after_insert_review)

    public_update_movie_review_count_after_delete_review = PGFunction(
        schema="public",
        signature="update_movie_review_count_after_delete_review()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n       UPDATE movies\n        SET movie_reviews_count = movie_reviews_count - 1\n        WHERE\n            id = OLD.movie_id;\n        \n    return OLD;\n    END;\n$$ language 'plpgsql'"
    )
    op.create_entity(public_update_movie_review_count_after_delete_review)

    public_user_review_movies_insert_review_trigger = PGTrigger(
        schema="public",
        signature="insert_review_trigger",
        on_entity="public.user_review_movies",
        is_constraint=False,
        definition='BEFORE INSERT ON public.user_review_movies\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_review_count_after_insert_review()'
    )
    op.create_entity(public_user_review_movies_insert_review_trigger)

    public_user_review_movies_delete_review_trigger = PGTrigger(
        schema="public",
        signature="delete_review_trigger",
        on_entity="public.user_review_movies",
        is_constraint=False,
        definition='BEFORE DELETE ON public.user_review_movies\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_review_count_after_delete_review()'
    )
    op.create_entity(public_user_review_movies_delete_review_trigger)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_user_review_movies_delete_review_trigger = PGTrigger(
        schema="public",
        signature="delete_review_trigger",
        on_entity="public.user_review_movies",
        is_constraint=False,
        definition='BEFORE DELETE ON public.user_review_movies\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_review_count_after_delete_review()'
    )
    op.drop_entity(public_user_review_movies_delete_review_trigger)

    public_user_review_movies_insert_review_trigger = PGTrigger(
        schema="public",
        signature="insert_review_trigger",
        on_entity="public.user_review_movies",
        is_constraint=False,
        definition='BEFORE INSERT ON public.user_review_movies\n        FOR EACH ROW \n        EXECUTE FUNCTION public.update_movie_review_count_after_insert_review()'
    )
    op.drop_entity(public_user_review_movies_insert_review_trigger)

    public_update_movie_review_count_after_delete_review = PGFunction(
        schema="public",
        signature="update_movie_review_count_after_delete_review()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n       UPDATE movies\n        SET movie_reviews_count = movie_reviews_count - 1\n        WHERE\n            id = OLD.movie_id;\n        \n    return OLD;\n    END;\n$$ language 'plpgsql'"
    )
    op.drop_entity(public_update_movie_review_count_after_delete_review)

    public_update_movie_review_count_after_insert_review = PGFunction(
        schema="public",
        signature="update_movie_review_count_after_insert_review()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        UPDATE movies\n        SET movie_reviews_count = movie_reviews_count + 1\n        WHERE\n            id = NEW.movie_id;\n    return NEW;\n    END;\n$$ language 'plpgsql'"
    )
    op.drop_entity(public_update_movie_review_count_after_insert_review)

    op.drop_column('movies', 'movie_reviews_count')
    # ### end Alembic commands ###
