"""First version

Revision ID: 2524d11690f5
Revises: 
Create Date: 2024-10-05 05:53:56.230556

"""
from typing import Sequence, Union, Any

from alembic import op
import sqlalchemy as sa
from database.Base import Base
from os.path import dirname, abspath

# revision identifiers, used by Alembic.
revision: str = '2524d11690f5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
convert_type : dict[str : Any] = {
    'INTEGER' : int,
    'VARCHAR' : str
}

def get_primary_key_generator():
    primary_key = 0
    def get_primary_key() -> int:
        nonlocal primary_key
        primary_key += 1
        return primary_key
    return get_primary_key



def split_any_type(item : list[str], index : int, type : type) -> tuple[int, Any]:
    field : list[str] = []
    
    if item[index][0] != '"':
        raise AttributeError(','.join(item))
    
    while (index < len(item)):
        field_now = item[index]
        field.append(field_now)
        if field_now[-1] == '"':
            break
        index += 1
    
    return index, type(','.join(field).removesuffix('"').removeprefix('"'))



def serializate_item(item : str, column_types : list[type], default_values_factory : list[Any] | None = None) -> str:
    item = item.replace('\n', '').split(',')
    serializated_item : list[str | int | None] = []
    item_index : int = 0
    default_values_factory_index : int = 0
    
    for type in column_types:
        if type is None:
            serializated_item.append(default_values_factory[default_values_factory_index]())
            default_values_factory_index += 1
            continue
        
        field = item[item_index]
        if type is int:
            field = int(field) if len(field) > 0 else None
        else:
            if field.count('"') == len(field):
                field = None
            item_index, field = (split_any_type(item, item_index, type) if field.count('"') != len(field) else (item_index, None))
                            
            
        serializated_item.append(field)
        item_index += 1
    
    if len(serializated_item) != len(column_types): 
        raise AttributeError(item)
    
    return serializated_item



def insert_data_from_file(
                        table_name : str,
                        file_name : str,
                        default_columns : set[str] | None = None,
                        default_values_factory : list[Any] | None = None
                    ) -> None:
    
    if default_columns is None:
        default_columns = set()
        default_values_factory = set()
        
    elif default_values_factory is None or len(default_columns) != len(default_values_factory):
        raise AttributeError()
        
    table : sa.Table = Base.metadata.tables[table_name]
    items : list[dict[str, Any]] = []
    keys : list[str] = table.columns.keys()
    types : list[type] = []
    
    for column in table.columns.values():
        if column.name not in default_columns:
            types.append(convert_type.get(str(column.type)))
        else:
            types.append(None)
        
    with open(f'{dirname(abspath(__file__))}/{file_name}', 'r+') as file:
        for item in file:
            serialization_item = serializate_item(item, types, default_values_factory)    
            items.append(dict((key, value) for key, value in zip(keys, serialization_item)))
    op.bulk_insert(table, items)
                


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('movies',
    sa.Column('movie_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('genres', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('movie_id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('links',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('movie_id', sa.Integer(), nullable=False),
    sa.Column('imdb_id', sa.Integer(), nullable=True),
    sa.Column('tmbd_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['movie_id'], ['movies.movie_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('imdb_id'),
    sa.UniqueConstraint('movie_id'),
    sa.UniqueConstraint('tmbd_id')
    )
    insert_data_from_file('movies', 'csv_data/movie_clear.csv')
    insert_data_from_file('links', 'csv_data/link_clear.csv', default_columns = set(['id']), default_values_factory = [get_primary_key_generator()])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('links')
    op.drop_table('movies')
    # ### end Alembic commands ###
