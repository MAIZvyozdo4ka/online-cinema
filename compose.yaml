services:
  init-script:
    build: 
      context: .
      dockerfile: scripts/init.Dockerfile
    networks:
      - app-network
  s3:
    depends_on:
      - init-script
    build: 
      context: .
      dockerfile: scripts/s3.Dockerfile
    ports:
      - 4000:8000
    networks:
      - app-network
    # entrypoint: ["/usr/src/app/docker-entrypoint.sh"]
    # volumes:
    #   - ./core:/code/core
  s3-init:
    build: 
      context: .
      dockerfile: scripts/s3-init.Dockerfile
    command: "python3 s3-init/s3_init.py"
    volumes:
      # - ./s3-init:/code/s3-init
      - ./core:/code/s3-init/core
    depends_on:
      - s3
      - init-script
    networks:
      - app-network

  postgres:
    image: postgres:13-alpine
    restart: always
    ports:
      - 5432:5432
    env_file:
      ./postgres.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost -p 5432"]
      interval: 10s
      retries: 5
      start_period: 1s
      timeout: 5s
  migrations:
    build:
      context: .
      dockerfile: scripts/migrations.Dockerfile
    volumes:
      - ./core:/code/core
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  auth-service:
    build: ./auth-service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8001:8000
    volumes:
      - ./auth-service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  movie-service:
    build: ./movie-service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8002:8000
    volumes:
      - ./movie-service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  rating-service:
    build: ./rating-service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8003:8000
    volumes:
      - ./rating-service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  review-service:
    build: ./review-service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8004:8000
    volumes:
      - ./review-service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  user-service:
    build: ./user-service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8005:8000
    volumes:
      - ./user-service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  admin-service:
    build: ./admin-service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8006:8000
    volumes:
      - ./admin-service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  moderator-service:
    build: ./moderator-service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8007:8000
    volumes:
      - ./moderator-service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  nginx-reverse-proxy:
    image: nginx:latest
    ports:
      - 8000:8080
    volumes:
      - ./nginx_config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - auth-service
      - rating-service
      - movie-service
      - review-service
      - user-service
      - admin-service
    networks:
      - app-network



networks:
  app-network:
    driver: bridge
