


services:
  s3:
    image: scality/s3server
    ports:
      - 4000:8000
    volumes:
      - ./core/env/s3_clients.json:/usr/src/app/conf/authdata.json
      - ./core/env/s3_config.json:/usr/src/app/config.json
    networks:
      - app-network
  
  s3-init:
    build: 
      context: .
      dockerfile: s3_init/s3.Dockerfile
    command: "python3 s3-init/s3_init.py"
    volumes:
      - ./s3_init:/code/s3_init
      - ./core:/code/s3_init/core
    depends_on:
      - s3
    networks:
      - app-network

  rec-update:
    build:
      context: .
      dockerfile: recommendation-updating/rec.Dockerfile
    command: "python3 -m recommendation-updating.main"
    volumes:
      - ./recommendation-updating:/code/recommendation-updating
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network

  postgres:
    image: postgres:13-alpine
    restart: always
    ports:
      - 5433:5432
    env_file:
      ./postgres.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost -p 5432"]
      interval: 10s
      retries: 5
      start_period: 1s
      timeout: 5s
      
  migrations:
    build:
      context: .
      dockerfile: migration/migrations.Dockerfile
    command: ["sh", "-c", "until pg_isready -U postgres -h postgres -p 5432; do echo Waiting for DB; sleep 2; done; alembic upgrade head"]
    volumes:
      - ./migration:/code/migration
      - ./core:/code/core
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    env_file:
      ./postgres.env

  auth-service:
    build: ./auth_service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8001:8000
    volumes:
      - ./auth_service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    env_file:
      ./postgres.env

  movie-service:
    build: ./movie_service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8002:8000
    volumes:
      - ./movie_service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    env_file:
      ./postgres.env

  rating-service:
    build: ./rating_service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8003:8000
    volumes:
      - ./rating_service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    env_file:
      ./postgres.env

  review-service:
    build: ./review_service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8004:8000
    volumes:
      - ./review_service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    env_file:
      ./postgres.env

  user-service:
    build: ./user_service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8005:8000
    volumes:
      - ./user_service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    env_file:
      ./postgres.env

  admin-service:
    build: ./admin_service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8006:8000
    volumes:
      - ./admin_service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    env_file:
      ./postgres.env

  moderator-service:
    build: ./moderator_service
    command: "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8007:8000
    volumes:
      - ./moderator_service/app:/code/app
      - ./core:/code/core
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    env_file:
      ./postgres.env

  
  nginx-reverse-proxy:
    image: nginx:latest
    ports:
      - 8000:8080
    volumes:
      - ./nginx_config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - auth-service
      - rating-service
      - movie-service
      - review-service
      - user-service
      - admin-service
    networks:
      - app-network
    env_file:
      ./postgres.env

  tests:
    build: 
      context: .
      dockerfile: tests.Dockerfile
    command: "pytest -v --disable-warnings"
    ports:
      - 8008:8000
    depends_on:
      - postgres
      - migrations
    networks:
      - app-network
    
  frontend:
    build: 
      context: ./front/online-cinema-frontend 
      dockerfile: Dockerfile.frontend
    ports:
      - 8008:80
    depends_on:
      - auth-service
      - rating-service
      - movie-service
      - review-service
      - user-service
      - admin-service
    networks:
      - app-network


networks:
  app-network:
    driver: bridge
